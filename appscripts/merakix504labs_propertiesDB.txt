// Comprehensive Google Apps Script for Property Portal
// Handles multiple sheet structures: Commercial Projects, Residential Projects, Bungalow Projects

const PROPERTY_SHEETS = {
  COMMERCIAL: {
    name: "Commercial Projects",
    columns: { srNo: 0, config: 1, carpetSize: 2, builtUp: 3, node: 4, price: 5, buyLease: 6, photos: 7 }
  },
  RESIDENTIAL: {
    name: "Residential Projects", 
    columns: { srNo: 0, config: 1, carpetSize: 2, builtUp: 3, node: 4, price: 5, buyLease: 6, photos: 7 }
  },
  BUNGALOW: {
    name: "Bungalow Projects",
    columns: { srNo: 0, config: 1, carpetSize: 2, builtUp: 3, node: 4, price: 5, photos: 6 }
  },
  ENQUIRIES: "Enquiries"
};

function doOptions(e) {
  return ContentService.createTextOutput('').setMimeType(ContentService.MimeType.JSON);
}

function doGet(e) {
  try {
    const category = e.parameter.category || 'ALL';
    const transactionType = e.parameter.transactionType || 'ALL';
    const limit = parseInt(e.parameter.limit) || 50;
    const offset = parseInt(e.parameter.offset) || 0;
    const search = e.parameter.search || '';
    const location = e.parameter.location || '';
    
    console.log(`=== PROPERTY FETCH REQUEST ===`);
    console.log(`Category: ${category}, Transaction: ${transactionType}, Limit: ${limit}, Offset: ${offset}`);
    console.log(`Search: "${search}", Location: "${location}"`);
    console.log(`==============================`);
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let allProperties = [];
    
    if (category === 'ALL') {
      for (const [sheetKey, sheetConfig] of Object.entries(PROPERTY_SHEETS)) {
        if (sheetKey !== 'ENQUIRIES') {
          const properties = getPropertiesFromSheet(ss, sheetConfig, sheetKey.toLowerCase(), transactionType);
          allProperties = allProperties.concat(properties);
        }
      }
    } else {
      const sheetConfig = PROPERTY_SHEETS[category.toUpperCase()];
      if (sheetConfig) {
        allProperties = getPropertiesFromSheet(ss, sheetConfig, category.toLowerCase(), transactionType);
      }
    }
    
    // Apply filters
    if (search) {
      allProperties = allProperties.filter(property =>
        (property.title && property.title.toLowerCase().includes(search.toLowerCase())) ||
        (property.location && property.location.toLowerCase().includes(search.toLowerCase())) ||
        (property.configuration && property.configuration.toLowerCase().includes(search.toLowerCase()))
      );
    }
    
    if (location) {
      allProperties = allProperties.filter(property =>
        (property.location && property.location.toLowerCase().includes(location.toLowerCase()))
      );
    }
    
    // Sort and paginate
    allProperties.sort((a, b) => {
      if (a.featured && !b.featured) return -1;
      if (!a.featured && b.featured) return 1;
      return parseInt(a.id) - parseInt(b.id);
    });
    
    const total = allProperties.length;
    const paginatedProperties = allProperties.slice(offset, offset + limit);
    
    console.log(`=== FINAL RESULTS ===`);
    console.log(`Total properties found: ${total}`);
    console.log(`Returning properties: ${paginatedProperties.length}`);
    console.log(`===================`);
    
    return ContentService.createTextOutput(JSON.stringify({
      status: 'success',
      data: paginatedProperties,
      total: total,
      category: category,
      pagination: { hasMore: offset + limit < total }
    })).setMimeType(ContentService.MimeType.JSON);
      
  } catch (error) {
    console.error('Error in doGet:', error);
    return ContentService.createTextOutput(JSON.stringify({
      status: 'error',
      message: error.toString()
    })).setMimeType(ContentService.MimeType.JSON);
  }
}

function getPropertiesFromSheet(ss, sheetConfig, categoryType, transactionType = 'ALL') {
  try {
    const sheet = ss.getSheetByName(sheetConfig.name);
    if (!sheet) {
      console.log(`Sheet ${sheetConfig.name} not found`);
      return [];
    }
    
    const lastRow = sheet.getLastRow();
    if (lastRow < 2) return [];
    
    const maxCol = Math.max(...Object.values(sheetConfig.columns)) + 1;
    const data = sheet.getRange(2, 1, lastRow - 1, maxCol).getValues();
    const properties = [];
    
    for (let i = 0; i < data.length; i++) {
      const row = data[i];
      const cols = sheetConfig.columns;
      
      if (!row[cols.srNo] || row[cols.srNo].toString().trim() === '') continue;
      
      let rowTransactionType = 'buy';
      if (cols.buyLease !== undefined) {
        const cellValue = (row[cols.buyLease] || '').toString().toLowerCase().trim();
        rowTransactionType = cellValue;
      }
      
      // CRITICAL FIX: Proper filtering logic for transaction types
      // When transactionType is 'ALL', include ALL properties regardless of buy/lease status
      if (transactionType !== 'ALL') {
        const requestedType = transactionType.toLowerCase().trim();
        const rowType = rowTransactionType.toLowerCase().trim();
        
        // Only filter when specific transaction type is requested
        if (requestedType === 'buy') {
          // For BUY requests, only include buy/sale properties
          if (!rowType.includes('buy') && !rowType.includes('sale') && !rowType.includes('sell')) {
            continue;
          }
        } else if (requestedType === 'lease') {
          // For LEASE requests, only include lease/rent properties
          if (!rowType.includes('lease') && !rowType.includes('rent')) {
            continue;
          }
        }
      }
      // If transactionType is 'ALL', no filtering - include all properties
      
      const property = {
        id: row[cols.srNo].toString(),
        type: categoryType,
        transactionType: determineTransactionType(rowTransactionType),
        title: createPropertyTitle(row[cols.config], categoryType, rowTransactionType),
        location: extractLocation(row[cols.node]),
        area: row[cols.node] || '',
        price: formatPrice(row[cols.price]),
        priceType: getPriceType(rowTransactionType, row[cols.price]),
        configuration: row[cols.config] || '',
        carpetArea: parseFloat(row[cols.carpetSize]) || 0,
        builtUpArea: parseFloat(row[cols.builtUp]) || 0,
        bedrooms: extractBedrooms(row[cols.config]),
        bathrooms: extractBathrooms(row[cols.config]),
        featured: i < 3,
        verified: true,
        contact: {
          name: 'Meraki Square Foots',
          phone: '+91 98765 43210',
          email: 'info@merakisquarefoots.com'
        },
        postedDate: new Date().toISOString().split('T')[0],
        images: processPhotoUrls(row[cols.photos])
      };
      
      properties.push(property);
    }
    
    return properties;
  } catch (error) {
    console.error(`Error processing sheet ${sheetConfig.name}:`, error);
    return [];
  }
}

function processPhotoUrls(photoString) {
  if (!photoString) return [];
  
  const photoUrls = [];
  const urls = photoString.toString().split(',').map(url => url.trim());
  
  for (const url of urls) {
    if (url && url.length > 0) {
      if (url.includes('cloudinary.com')) {
        photoUrls.push(url);
      } else if (url.includes('drive.google.com')) {
        const fileIdMatch = url.match(/\/file\/d\/([a-zA-Z0-9-_]+)/);
        if (fileIdMatch && fileIdMatch[1]) {
          photoUrls.push(`https://drive.google.com/uc?id=${fileIdMatch[1]}`);
        }
      } else if (url.startsWith('http')) {
        photoUrls.push(url);
      }
    }
  }
  
  return photoUrls;
}

function createPropertyTitle(configuration, category, transactionType) {
  if (!configuration) return 'Property Available';
  
  const txnType = transactionType.includes('buy') ? 'sale' : 
                 transactionType.includes('lease') ? 'lease' : 'sale';
  
  switch (category) {
    case 'residential':
      return `${configuration} for ${txnType}`;
    case 'commercial':
      return `Commercial ${configuration} for ${txnType}`;
    case 'bungalow':
      return `${configuration} for ${txnType}`;
    default:
      return `${configuration} for ${txnType}`;
  }
}

function extractLocation(node) {
  if (!node) return 'Navi Mumbai';
  
  const nodeStr = node.toString().toLowerCase();
  if (nodeStr.includes('kharghar')) return 'Kharghar, Navi Mumbai';
  if (nodeStr.includes('panvel')) return 'Panvel, Navi Mumbai';
  if (nodeStr.includes('ulwe')) return 'Ulwe, Navi Mumbai';
  if (nodeStr.includes('kamothe')) return 'Kamothe, Navi Mumbai';
  if (nodeStr.includes('nerul')) return 'Nerul, Navi Mumbai';
  if (nodeStr.includes('belapur')) return 'Belapur, Navi Mumbai';
  if (nodeStr.includes('seawoods')) return 'Seawoods, Navi Mumbai';
  
  return `${node}, Navi Mumbai`;
}

function determineTransactionType(rowTransactionType) {
  if (!rowTransactionType || rowTransactionType.trim() === '') {
    return 'buy'; // default
  }
  
  const type = rowTransactionType.toLowerCase();
  if (type.includes('lease') || type.includes('rent')) {
    return 'lease';
  }
  if (type.includes('buy') || type.includes('sale') || type.includes('sell')) {
    return 'buy';
  }
  
  return 'buy'; // default fallback
}

function extractBedrooms(configuration) {
  if (!configuration) return 0;
  
  const config = configuration.toString().toLowerCase();
  if (config.includes('1 bhk')) return 1;
  if (config.includes('2 bhk')) return 2;
  if (config.includes('3 bhk')) return 3;
  if (config.includes('4 bhk')) return 4;
  if (config.includes('5 bhk')) return 5;
  if (config.includes('studio')) return 0;
  if (config.includes('shop') || config.includes('office')) return 0;
  
  return 1;
}

function extractBathrooms(configuration) {
  const bedrooms = extractBedrooms(configuration);
  return bedrooms === 0 ? 1 : bedrooms;
}

function formatPrice(price) {
  if (!price) return '0';
  
  const priceStr = price.toString();
  if (priceStr.includes('â‚¹') || priceStr.includes('Cr') || priceStr.includes('L')) {
    return priceStr;
  }
  
  const numPrice = parseFloat(priceStr);
  if (isNaN(numPrice)) return priceStr;
  
  if (numPrice >= 10000000) {
    return `${(numPrice / 10000000).toFixed(2)} Cr`;
  } else if (numPrice >= 100000) {
    return `${(numPrice / 100000).toFixed(0)} L`;
  } else {
    return `${numPrice}K`;
  }
}

function getPriceType(transactionType, price) {
  if (transactionType.includes('lease') || transactionType.includes('rent')) {
    return 'per_month';
  }
  if (price && price.toString().toLowerCase().includes('sq ft')) {
    return 'per_sqft';
  }
  return 'total';
}

function doPost(e) {
  try {
    const data = JSON.parse(e.postData.contents);
    
    if (data.type === 'enquiry') {
      return handleEnquiry(data);
    }
    
    return ContentService.createTextOutput(JSON.stringify({
      status: 'error',
      message: 'Unknown request type'
    })).setMimeType(ContentService.MimeType.JSON);
    
  } catch (error) {
    return ContentService.createTextOutput(JSON.stringify({
      status: 'error',
      message: error.toString()
    })).setMimeType(ContentService.MimeType.JSON);
  }
}

function handleEnquiry(data) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let enquirySheet = ss.getSheetByName(PROPERTY_SHEETS.ENQUIRIES);
    
    if (!enquirySheet) {
      enquirySheet = ss.insertSheet(PROPERTY_SHEETS.ENQUIRIES);
      enquirySheet.getRange(1, 1, 1, 10).setValues([[
        'Timestamp', 'Name', 'Phone', 'Email', 'Message', 'Property ID', 'Property Title', 'Location', 'Price', 'Status'
      ]]);
    }
    
    const timestamp = new Date().toISOString();
    enquirySheet.appendRow([
      timestamp, data.name, data.phone, data.email, data.message || '',
      data.propertyId || '', data.propertyTitle || '', data.location || '', data.price || '', 'New'
    ]);
    
    return ContentService.createTextOutput(JSON.stringify({
      status: 'success',
      message: 'Enquiry submitted successfully'
    })).setMimeType(ContentService.MimeType.JSON);
    
  } catch (error) {
    return ContentService.createTextOutput(JSON.stringify({
      status: 'error',
      message: error.toString()
    })).setMimeType(ContentService.MimeType.JSON);
  }
}